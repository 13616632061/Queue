package yzx.com.queue.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import yzx.com.queue.entity.OrderType;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ORDER_TYPE".
*/
public class OrderTypeDao extends AbstractDao<OrderType, Long> {

    public static final String TABLENAME = "ORDER_TYPE";

    /**
     * Properties of entity OrderType.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property TypeName = new Property(1, String.class, "typeName", false, "TYPE_NAME");
        public final static Property MinNum = new Property(2, Integer.class, "minNum", false, "MIN_NUM");
        public final static Property MaxNum = new Property(3, Integer.class, "maxNum", false, "MAX_NUM");
        public final static Property IsSelect = new Property(4, Boolean.class, "isSelect", false, "IS_SELECT");
        public final static Property OrderNum = new Property(5, Integer.class, "orderNum", false, "ORDER_NUM");
        public final static Property Number = new Property(6, String.class, "number", false, "NUMBER");
    }


    public OrderTypeDao(DaoConfig config) {
        super(config);
    }
    
    public OrderTypeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ORDER_TYPE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TYPE_NAME\" TEXT," + // 1: typeName
                "\"MIN_NUM\" INTEGER," + // 2: minNum
                "\"MAX_NUM\" INTEGER," + // 3: maxNum
                "\"IS_SELECT\" INTEGER," + // 4: isSelect
                "\"ORDER_NUM\" INTEGER," + // 5: orderNum
                "\"NUMBER\" TEXT);"); // 6: number
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ORDER_TYPE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, OrderType entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String typeName = entity.getTypeName();
        if (typeName != null) {
            stmt.bindString(2, typeName);
        }
 
        Integer minNum = entity.getMinNum();
        if (minNum != null) {
            stmt.bindLong(3, minNum);
        }
 
        Integer maxNum = entity.getMaxNum();
        if (maxNum != null) {
            stmt.bindLong(4, maxNum);
        }
 
        Boolean isSelect = entity.getIsSelect();
        if (isSelect != null) {
            stmt.bindLong(5, isSelect ? 1L: 0L);
        }
 
        Integer orderNum = entity.getOrderNum();
        if (orderNum != null) {
            stmt.bindLong(6, orderNum);
        }
 
        String number = entity.getNumber();
        if (number != null) {
            stmt.bindString(7, number);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, OrderType entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String typeName = entity.getTypeName();
        if (typeName != null) {
            stmt.bindString(2, typeName);
        }
 
        Integer minNum = entity.getMinNum();
        if (minNum != null) {
            stmt.bindLong(3, minNum);
        }
 
        Integer maxNum = entity.getMaxNum();
        if (maxNum != null) {
            stmt.bindLong(4, maxNum);
        }
 
        Boolean isSelect = entity.getIsSelect();
        if (isSelect != null) {
            stmt.bindLong(5, isSelect ? 1L: 0L);
        }
 
        Integer orderNum = entity.getOrderNum();
        if (orderNum != null) {
            stmt.bindLong(6, orderNum);
        }
 
        String number = entity.getNumber();
        if (number != null) {
            stmt.bindString(7, number);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public OrderType readEntity(Cursor cursor, int offset) {
        OrderType entity = new OrderType( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // typeName
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // minNum
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // maxNum
            cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0, // isSelect
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // orderNum
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // number
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, OrderType entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTypeName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMinNum(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setMaxNum(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setIsSelect(cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0);
        entity.setOrderNum(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setNumber(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(OrderType entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(OrderType entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(OrderType entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
